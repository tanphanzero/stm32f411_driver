/*
 * stm32f411_spi_driver.h
 *
 *  Created on: Sep 7, 2023
 *      Author: Dell
 */

#ifndef INC_STM32F411_SPI_DRIVER_H_
#define INC_STM32F411_SPI_DRIVER_H_

#include "stm32f411.h"

typedef struct
{
	uint8_t SPI_DeviceMode;
	uint8_t SPI_BusConfig;
	uint8_t SPI_SclkSpeed;
	uint8_t SPI_DFF;
	uint8_t SPI_CPOL;
	uint8_t SPI_CPHA;
	uint8_t SPI_SSM;
}SPI_Config_t;

typedef struct
{
	SPI_RegDef_t *pSPIx;
	SPI_Config_t SPI_Config;
	uint8_t	*pTxBuffer;
	uint8_t	*pRxBuffer;
	uint32_t TxLen;
	uint32_t RxLen;
	uint8_t	TxState;
	uint8_t	RxState;
}SPI_Handle_t;

//SPI devicemode
#define SPI_DEVICE_MODE_MASTER				1
#define SPI_DEVICE_MODE_SLAVE				0

//SPI_busconfig
#define SPI_BUS_CONFIG_FD					1
#define SPI_BUS_CONFIG_HD					2
#define SPI_BUS_CONFIG_SIMPLEX_RXONLY		3

//SPI ClockConfig
#define SPI_SCLK_SPEED_DIV2					0
#define SPI_SCLK_SPEED_DIV4					1
#define SPI_SCLK_SPEED_DIV8					2
#define SPI_SCLK_SPEED_DIV16				3
#define SPI_SCLK_SPEED_DIV32				4
#define SPI_SCLK_SPEED_DIV64				5
#define SPI_SCLK_SPEED_DIV128				6
#define SPI_SCLK_SPEED_DIV256				7

//SPI DFF
#define SPI_DFF_8BITS						0
#define SPI_DFF_16BITS						1

//SPI CPOL
#define SPI_CPOL_LOW						0
#define SPI_CPOL_HIGH						1

//SPI CPHA
#define SPI_CPHA_LOW						0
#define SPI_CPHA_HIGH						1

//SPI SSM
#define SPI_SSM_DI						0
#define SPI_SSM_EN						1

//SPI flag status shifts
#define SPI_RXNE_FLAG					(1 << SPI_SR_RXNE)
#define SPI_TXE_FLAG					(1 << SPI_SR_TXE)
#define SPI_CHSIDE_FLAG					(1 << SPI_SR_CHSIDE)
#define SPI_UDR_FLAG					(1 << SPI_SR_UDR)
#define SPI_CRCERR_FLAG					(1 << SPI_SR_CRCERR)
#define SPI_MODF_FLAG					(1 << SPI_SR_MODF)
#define SPI_OVR_FLAG					(1 << SPI_SR_OVR)
#define SPI_BSY_FLAG					(1 << SPI_SR_BSY)
#define SPI_FRE_FLAG					(1 << SPI_SR_FRE)

//SPI application states
#define SPI_READY						0
#define SPI_BUSY_IN_RX					1
#define SPI_BUSY_IN_TX					2

void SPI_PeripheralClockControl(SPI_RegDef_t *pSPIx , uint8_t EnorDi);

//init and deinit apis
void SPI_Init(SPI_Handle_t *pSPIHandle);
void SPI_DeInit(SPI_RegDef_t *pSPIx);
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi);
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi);
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi);
void SPI_ClearOVRFlag(SPI_RegDef_t *pSPIx);

//SPI send and receive apis
void SPI_Send(SPI_RegDef_t *pSPIx , uint8_t *pTxBuffer , uint32_t length);
void SPI_Read(SPI_RegDef_t *pSPIx , uint8_t *pRxBuffer , uint32_t length);
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIxx , uint32_t FlagName);

//SPI interrupt configuration

void SPI_IRQInterruptConfig(uint8_t IRQ_Number , uint8_t EnorDi);
void SPI_IRQPriorityConfig(uint8_t IRQ_Number , uint32_t Interrupt_Prority);
void SPI_IRQHandling (SPI_Handle_t *pSPIHandle);

//SPI send and receive interrupt mode apis

uint8_t SPI_SendIT(SPI_Handle_t *pSPIHandle , uint8_t *pTxBuffer , uint32_t length);
uint8_t SPI_ReadIT(SPI_Handle_t *pSPIHandle , uint8_t *pRxBuffer , uint32_t length);
void SPI_CloseTransmissionIT(SPI_Handle_t *pSPIHandle);
void SPI_CloseRecptionIT(SPI_Handle_t *pSPIHandle);

//Application event complete callbacck api
void SPI_ApplicationEventCallBack(SPI_Handle_t *pSPIHandle , uint8_t eventcode);
#endif /* INC_STM32F411_SPI_DRIVER_H_ */
