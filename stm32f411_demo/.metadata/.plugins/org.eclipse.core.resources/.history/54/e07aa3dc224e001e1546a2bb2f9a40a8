/*
 * stm32f411disc_spi_driver.c
 *
 *  Created on: Sep 7, 2023
 *      Author: Dell
 */

#include "stm32f411_spi_driver.h"

// SPI peripheral clock control

void SPI_PeripheralClockControl(SPI_RegDef_t *pSPIx , uint8_t EnorDi)
{
	if (EnorDi == ENABLE)
	{
		if (pSPIx == SPI1)
			SPI1_PCLK_EN();
		else if (pSPIx == SPI2)
			SPI2_PCLK_EN();
		else if (pSPIx == SPI3)
			SPI3_PCLK_EN();
	}
	else
	{
		if (pSPIx == SPI1)
			SPI1_PCLK_DI();
		else if (pSPIx == SPI2)
			SPI2_PCLK_DI();
		else if (pSPIx == SPI3)
			SPI3_PCLK_DI();
	}
}

// init and deinit apis
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
	// enable the clock
	SPI_PeripheralClockControl(pSPIHandle->pSPIx, ENABLE);

// first configure the SPI_CR1 register
	uint32_t tempreg = 0;

	// configure the the spi device mode
	tempreg |= ( pSPIHandle->SPI_Config.SPI_DeviceMode << SPI_CR1_MSTR);

	// configure the bus config
	if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD)
	{
		// BIDIMODE should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
	}
	else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD)
	{
		// BIDIMODE should be set
		tempreg |=  ( 1 << SPI_CR1_BIDIMODE);
	}
	else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
	{
		// BIDIMODE should be cleared ;
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);

		// RXOONLY bit should be set
		tempreg |=  ( 1 << SPI_CR1_RXONLY);
	}

	// configure spi clock speed
	tempreg |= (pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_CR1_BR);

	// configure spi dff mode
	tempreg |= (pSPIHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF);

	// configure spi cpol
	tempreg |= (pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL);

	// configure spi cpha
	tempreg |= (pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPHA);

	// configure spi ssm
	tempreg |= (pSPIHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM);

	pSPIHandle->pSPIx->CR1 = tempreg;
}

void SPI_DeInit(SPI_RegDef_t *pSPIx)
{
	if (pSPIx == SPI1)
		SPI1_REG_RESET();
	else if (pSPIx == SPI2)
		SPI2_REG_RESET();
	else if (pSPIx == SPI3)
		SPI3_REG_RESET();
}

//SPI get flag status
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName )
{
	if ((pSPIx->SR &  FlagName))
	{
		return FLAG_SET;
	}
	return FLAG_RESET;
}

// SPI send and receive apis
void SPI_Send(SPI_RegDef_t *pSPIx , uint8_t *pTxBuffer , uint32_t length)
{
	while(length > 0)
	{
		//wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);

		//check the DFF bit in CR1
		if ((pSPIx->CR1 & (1 << SPI_CR1_DFF)))
		{
			// 16 bit data format
			// load 16 bit of data into DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
			length--;
			length--;
			(uint16_t*)pTxBuffer++;
		}
		else
		{
			// load 8 bit data into DR
			pSPIx->DR = *pTxBuffer;
			length--;
			pTxBuffer++;
		}
	}
}

void SPI_Read(SPI_RegDef_t *pSPIx , uint8_t *pRxBuffer , uint32_t length)
{
	while(length > 0)
	{
		//wait until RXNE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);

		//check the DFF bit in CR1
		if ((pSPIx->CR1 & (1 << SPI_CR1_DFF)))
		{
			// 16 bit data format
			// read 16 bit of data into DR
			 *((uint16_t*)pRxBuffer) = pSPIx->DR;
			length--;
			length--;
			(uint16_t*)pRxBuffer++;
		}
		else
		{
			// load 8 bit data into DR
			*pRxBuffer = pSPIx->DR;
			length--;
			pRxBuffer++;
		}
	}
}

// SPI peripheral enable
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
	else
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
}

// SPI SSI configuration
void  SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
		pSPIx->CR1 |=  (1 << SPI_CR1_SSI);
	else
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
}


