/*
 * stm32f411disc_i2c_driver.c
 *
 *  Created on: Sep 10, 2023
 *      Author: Dell
 */


#include "stm32f411_i2c_driver.h"
#include "stm32f411_rcc_driver.h"
#include <stddef.h>

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
	if (EnOrDi == ENABLE)
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}
}

void I2C_PeripheralClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
    if (EnOrDi == ENABLE)
    {
        if (pI2Cx == I2C1)
            I2C1_PCLK_EN();
        else if (pI2Cx == I2C2)
            I2C2_PCLK_EN();
        else if (pI2Cx == I2C3)
            I2C3_PCLK_EN();
    }
    else
    {
        if (pI2Cx == I2C1)
            I2C1_PCLK_DI();
        else if (pI2Cx == I2C2)
            I2C2_PCLK_DI();
        else if (pI2Cx == I2C3)
            I2C3_PCLK_DI();
    }
}

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
    uint32_t temp = 0;

    //ack
    temp |= pI2CHandle->I2C_Config.I2C_ACKControl << 10; // ack control
    pI2CHandle->pI2Cx->CR1 = temp;

    //FREQ CR2
    temp = 0;
    temp |= RCC_GetPCLK1Value() / 1000000U;
    pI2CHandle->pI2Cx->CR2 = temp & 0x3F;

    //OAR1 7bit or 10bit
    temp = 0;
    temp |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
    temp |= (1 << 14);
    pI2CHandle->pI2Cx->OAR1 = temp;

    //CCR
    uint16_t ccr_value = 0;
    temp = 0;
    if (pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
    {
    	//standard mode
        ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
        temp |= (ccr_value & 0xFFF);
    }
    else //fast mode
    {
        temp |= (1 << 15);
        temp |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
        if (pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
        {
            ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
        }
        else
        {
            ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
        }
        temp |= (ccr_value & 0xFFF);
    }
    pI2CHandle->pI2Cx->CCR = temp;
    if (pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
    { // STANDARD MODE

        temp = (RCC_GetPCLK1Value() / 1000000U) + 1;
    }
    else
    {
        temp = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
    }
    pI2CHandle->pI2Cx->TRISE = temp & 0x3F;
}

