/*
 * stm32f411disc_i2c_driver.c
 *
 *  Created on: Sep 10, 2023
 *      Author: Dell
 */


#include "stm32f411_i2c_driver.h"
#include "stm32f411_rcc_driver.h"
#include <stddef.h>
#include <stdio.h>


static void I2C_Generate_start_condition(I2C_RegDef_t *pI2Cx)
{
    pI2Cx->CR1 |= (1 << I2C_CR1_START);
}

static void I2C_Generate_Stop_Condition(I2C_RegDef_t *pI2Cx)
{
    pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
}

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t I2C_FLAG)
{

    if (pI2Cx->SR1 & I2C_FLAG)
    {

        return FLAG_SET;
    }
    else
    {

        return FLAG_RESET;
    }
}

static void I2C_ExecuteAddresPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddress, uint8_t ReadORWrite)
{

    SlaveAddress = SlaveAddress << 1;

    if (ReadORWrite == 0)
    {
        SlaveAddress &= ~(1 << 0); // the slave address is write bit combined
    }
    else if (ReadORWrite == 1)
    {
        SlaveAddress |= (1 << 0); // the slave address is Read bit combined
    }
    pI2Cx->DR = SlaveAddress;
}

static void Clear_ADDR_FLAG(I2C_Handle_t *pI2CHandle)
{
    uint32_t DummyRead = 0;

    // check for device mode
    if ((pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)))
    {
        // device is in master mode
        if (pI2CHandle->RxTxStatus == I2C_STATUS_BUSY_IN_RX)
        {

            if (pI2CHandle->RxSize == 1)
            {
                // disable the acking first
                pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);

                // clear the addr flag
                DummyRead = pI2CHandle->pI2Cx->SR1;
                DummyRead = pI2CHandle->pI2Cx->SR2;
                (void)DummyRead;
            }
        }
        else
        {
            // device is in transmit mode or don't know
            // clear the addr flag
            DummyRead = pI2CHandle->pI2Cx->SR1;
            DummyRead = pI2CHandle->pI2Cx->SR2;
            (void)DummyRead;
        }
    }
    else
    {
        // device is in slave mode
        // clear the addr flag straight away
        DummyRead = pI2CHandle->pI2Cx->SR1;
        DummyRead = pI2CHandle->pI2Cx->SR2;
        (void)DummyRead;
    }
}

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{

    printf("closing data transfer in interrupt mode \n");
    // disable all the interrupts
    pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
    pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
    printf("interrupts disabled transmission \n");
    pI2CHandle->RxTxStatus = I2C_STATUS_READY;
    pI2CHandle->pTxBuffer = NULL;
    pI2CHandle->TxLen = 0;
    printf("handle variables reset transmission \n");
}

void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
    printf("closing data reception in interrupt mode \n");
    // disable all the interrupts
    pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
    pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
    printf("interrupts disabled reception \n");
    pI2CHandle->RxTxStatus = I2C_STATUS_READY;
    pI2CHandle->pRxBuffer = NULL;
    pI2CHandle->RxLen = 0;
    pI2CHandle->RxSize = 0;
    printf("handle variables reset reception \n");
    // re-enable the acking
    pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
    printf("Ack enabled interrupt \n");
}

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{

    if (EnOrDi == ENABLE)
    {
        pI2Cx->CR1 |= (1 << I2C_CR1_PE);
    }
    else
    {
        pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
    }
}

void I2C_PeripheralClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
    if (EnOrDi == ENABLE)
    {
        if (pI2Cx == I2C1)
            I2C1_PCLK_EN();
        else if (pI2Cx == I2C2)
            I2C2_PCLK_EN();
        else if (pI2Cx == I2C3)
            I2C3_PCLK_EN();
    }
    else
    {
        if (pI2Cx == I2C1)
            I2C1_PCLK_DI();
        else if (pI2Cx == I2C2)
            I2C2_PCLK_DI();
        else if (pI2Cx == I2C3)
            I2C3_PCLK_DI();
    }
}

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
    uint32_t temp = 0;

    //ack
    temp |= pI2CHandle->I2C_Config.I2C_ACKControl << 10; // ack control
    pI2CHandle->pI2Cx->CR1 = temp;

    //FREQ CR2
    temp = 0;
    temp |= RCC_GetPCLK1Value() / 1000000U;
    pI2CHandle->pI2Cx->CR2 = temp & 0x3F;

    //OAR1 7bit or 10bit
    temp = 0;
    temp |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
    temp |= (1 << 14);
    pI2CHandle->pI2Cx->OAR1 = temp;

    //CCR
    uint16_t ccr_value = 0;
    temp = 0;
    if (pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
    {
    	//standard mode
        ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
        temp |= (ccr_value & 0xFFF);
    }
    else //fast mode
    {
        temp |= (1 << 15);
        temp |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
        if (pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
        {
            ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
        }
        else
        {
            ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
        }
        temp |= (ccr_value & 0xFFF);
    }
    pI2CHandle->pI2Cx->CCR = temp;
    if (pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
    { // STANDARD MODE

        temp = (RCC_GetPCLK1Value() / 1000000U) + 1;
    }
    else
    {
        temp = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
    }
    pI2CHandle->pI2Cx->TRISE = temp & 0x3F;
}

void I2C_DeInit(I2C_RegDef_t *pI2Cx)
{

    if (pI2Cx == I2C1)
        I2C1_REG_RESET();
    else if (pI2Cx == I2C2)
        I2C2_REG_RESET();
    else if (pI2Cx == I2C3)
        I2C3_REG_RESET();
}

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t length, uint8_t SlaveAddress, uint8_t rep_start)
{

    // Generate the start condition
    I2C_Generate_start_condition(pI2CHandle->pI2Cx);

    while (!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB))); // wait for the SR1 to SET

    // write the address of the slave to the DR
    I2C_ExecuteAddresPhase(pI2CHandle->pI2Cx, SlaveAddress, 0);

    // check wether the address phase is completed or not
    while (!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)));

    // clear ADDR flag
    Clear_ADDR_FLAG(pI2CHandle);
    // send the data until length become zero

    while (length > 0)
    {

        while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
        pI2CHandle->pI2Cx->DR = *pTxBuffer; // Transferring  1 byte of data to dr register
        pTxBuffer++;
        length--;
    }

    // when the length becomes zero wait for the txe and btf flag to become 1 and then end the communication

    while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));

    while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));

    if (rep_start == DISABLE)
    {
        // Generate the Stop condition
        I2C_Generate_Stop_Condition(pI2CHandle->pI2Cx);
    }
}

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint32_t length, uint8_t SlaveAddress, uint8_t rep_start)
{

    // Generate the start condition
    I2C_Generate_start_condition(pI2CHandle->pI2Cx);
    while (!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB))); // wait for the SR1 to SET
    // write the address of the slave to the DR
    I2C_ExecuteAddresPhase(pI2CHandle->pI2Cx, SlaveAddress, 1);
    // check whether the address phase is completed or not
    while (!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)));

    if (length == 1)
    {
        // disable the acking
        pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);

        // clear the addr flag
        Clear_ADDR_FLAG(pI2CHandle);

        // wait until RXNE becomes 1
        while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));

        // check for repeated start
        if (rep_start == DISABLE)
        {
            // generate stop condition
            I2C_Generate_Stop_Condition(pI2CHandle->pI2Cx);
        }

        // read the data buffer
        *pRxBuffer = pI2CHandle->pI2Cx->DR;
    }

    if (length > 1)
    {
        // clear the addr flag
        Clear_ADDR_FLAG(pI2CHandle);

        for (uint32_t i = length; i > 0; i--)
        {
            // wait until RxNE becomes 1
            while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
            // if last 2 bytes are remaining
            if (i == 2)
            {
                // clear the ack bit
                // disable the acking
                pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);

                // check for repeated start
                if (rep_start == DISABLE)
                {
                    // generate stop condition
                    I2C_Generate_Stop_Condition(pI2CHandle->pI2Cx);
                }
            }
            // read the data from the dr into the buffer
            *pRxBuffer = pI2CHandle->pI2Cx->DR;

            // increment the address
            pRxBuffer++;
        }
    }
    if (pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
    {
        // enable the acking
        pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
    }
}


void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
	if (EnorDi == ENABLE)
	{
		if (IRQNumber <= 31)
		{
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
		}
		else if (IRQNumber > 31 && IRQNumber < 64)
		{
			//program ISER1 register
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
		}
		else if (IRQNumber >= 64 && IRQNumber < 96)
		{
			//program ISER2 register
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
		}
	}
	else
	{
		if (IRQNumber <= 31)
		{
			//program ICER0 register
			*NVIC_ICER0 |= (1 << IRQNumber);
		}
		else if (IRQNumber > 31 && IRQNumber < 64)
		{
			//program ICER1 register
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
		}
		else if (IRQNumber >= 64 && IRQNumber < 96)
		{
			//program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}
	}
}

void I2C_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
	uint8_t ipr = IRQNumber/4;
	uint8_t irq = IRQNumber%4;

	*(NVIC_PR_BASE_ADDR + ipr) |= (IRQPriority << (8*irq + 4));
}

// i2c send and receive interrupt mode apis

uint8_t I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t length, uint8_t SlaveAddr, uint8_t rep_start)
{

    uint8_t busystate = pI2CHandle->RxTxStatus;

    if ((busystate != I2C_STATUS_BUSY_IN_TX) && (busystate != I2C_STATUS_BUSY_IN_RX))
    {

        pI2CHandle->Target_Address = SlaveAddr;
        pI2CHandle->TxLen = length;
        pI2CHandle->pTxBuffer = pTxBuffer;
        pI2CHandle->RxTxStatus = I2C_STATUS_BUSY_IN_TX;
        pI2CHandle->RepeatedStart = rep_start;
        // generate the start condition
        I2C_Generate_start_condition(pI2CHandle->pI2Cx);
    }

    // enable the event interrupt for i2c in cr1 register
    pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
    pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
    pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);

    return busystate;
}

uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint32_t length, uint8_t SlaveAddr, uint8_t rep_start)
{

    uint8_t busystate = pI2CHandle->RxTxStatus;

    if ((busystate != I2C_STATUS_BUSY_IN_TX) && (busystate != I2C_STATUS_BUSY_IN_RX))
    {

        pI2CHandle->Target_Address = SlaveAddr;
        pI2CHandle->RxLen = length;
        pI2CHandle->RxSize = length;
        pI2CHandle->pRxBuffer = pRxBuffer;
        pI2CHandle->RxTxStatus = I2C_STATUS_BUSY_IN_RX;
        pI2CHandle->RepeatedStart = rep_start;
        // generate the start condition
        I2C_Generate_start_condition(pI2CHandle->pI2Cx);
    }
    // enable the event and error interrupt for i2c in cr1 register
    pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
    pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
    pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);

    return busystate;
}

void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
    uint32_t temp1, temp2, temp3;
    // check for start bit event
    temp1 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
    temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);

    if (temp1 && temp2)
    {
        // start bit is enabled communication has started
        if (pI2CHandle->RxTxStatus == I2C_STATUS_BUSY_IN_TX)
        {

            I2C_executeAddresPhase(pI2CHandle->pI2Cx, pI2CHandle->DevAddr, 0);
        }
        else if (pI2CHandle->RxTxStatus == I2C_BUSY_IN_RX)
        {

            I2C_executeAddresPhase(pI2CHandle->pI2Cx, pI2CHandle->DevAddr, 1);
        }
    }

    // check for ADDR event
    // ADDR event also occurs in slave mode when address math is successful

    temp1 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
    temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);

    if (temp1 && temp2)
    {
        // address phase has been completed

        Clear_ADDR_FLAG(pI2CHandle);
    }

    // check for ADDR10 event

    temp1 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADD10);
    temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);

    if (temp1 && temp2)
    {
        // 10 bit address has been selected
        // 10 bit address has been sent to the slave by master it is same as ADDR event
        printf("10 bit addr mode not supported please switch to 7 bits addr mode \n");
        printf("restarting the communication with 7 bit addr mode \n");
        printf("demo mode \n");
    }

    // check for BTF event

    temp1 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
    temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);

    if (temp1 && temp2)
    {
        // BTF event has occurred which is when data byte has been transfered

        if (pI2CHandle->RxTxStatus == I2C_BUSY_IN_TX)
        {

            if (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG))
            {

                // BTF  and TXE  both are set
                if (pI2CHandle->TxLen == 0)
                {

                    // generate the stop condition
                    // generate the stop condition only if the repeated start is enabled
                    if (pI2CHandle->Sr == DISABLE)
                    {
                        I2C_Generate_Stop_Condition(pI2CHandle->pI2Cx);
                    }

                    // reset all the contents of the member element
                    I2C_CloseSendData(pI2CHandle); // close send data function call for interrupt based implementation

                    // notify the application about the i2c transmission complete
                    I2C_ApplicationEventCallBack(pI2CHandle, I2C_EVENT_TX_CMPLT);
                }
            }
        }
        else if (pI2CHandle->RxTxStatus == I2C_BUSY_IN_RX)
        {
            // when new byte is recieved and dr hasn't been read yet
            printf("new byte recieved \n ");
        }
    }

    // check for STOPF event
    temp1 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
    temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);

    if (temp1 && temp2)
    {
        // stop condition has been detected by slave when master generates stop condition
        // this event only occurs in slave mode when stop condition is detected
        uint32_t DummyRead = 0;

        DummyRead = pI2CHandle->pI2Cx->SR1;
        DummyRead = 0;
        pI2CHandle->pI2Cx->CR1 |= DummyRead;

        // notify the application about the i2c stop condition has been detected
        I2C_ApplicationEventCallBack(pI2CHandle, I2C_EVENT_STOP);
    }

    // check for RxNE event

    temp1 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RxNE);
    temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
    temp3 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);

    if (temp1 && temp2 && temp3)
    {
        // RxNE event has occurred the rx buffer is not
        // empty and there is data in rx buffer and is to be read

        // Check for device Mode
        if ((pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)))
        {
            // The Device is in master mode
            if (pI2CHandle->RxTxStatus == I2C_BUSY_IN_RX)
            {

                if (pI2CHandle->RxSize == 1)
                {
                    printf("Receiving data 1byte interrupt mode \n");
                    *pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
                    pI2CHandle->RxLen--;
                }

                if (pI2CHandle->RxSize > 1)
                {
                    printf("Receiving data interrupt mode \n");
                    if (pI2CHandle->RxLen == 2)
                    {
                        // turn off the Acking
                        pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
                    }

                    *pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
                    pI2CHandle->RxLen--;
                    pI2CHandle->pRxBuffer++;
                }
                if (pI2CHandle->RxLen == 0)
                {
                    // generate the stop condition and notify the application

                    // generate the stop condition
                    if (pI2CHandle->Sr == I2C_DISABLE_SR)
                    {
                        I2C_Generate_Stop_Condition(pI2CHandle->pI2Cx);
                    }

                    // close the I2C rx
                    I2C_CloseSendData(pI2CHandle);

                    // notify the application
                    I2C_ApplicationEventCallBack(pI2CHandle, I2C_EV_RX_CMPLT);
                }
            }
        }
    }

    // check for TxE event

    temp1 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);
    temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
    temp3 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);

    if (temp1 && temp2 && temp3)
    {
        // TxE event has occurred the tx buffer is empty
        // transmitt the data
        // do this only when device is in master mode
        if ((pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)))
        {
            if (pI2CHandle->RxTxStatus == I2C_BUSY_IN_TX)
            {
                if (pI2CHandle->TxLen > 0)
                {
                    printf("TransIT \n");
                    // load the data into DR
                    pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
                    // decrement the TxLen
                    pI2CHandle->TxLen--;
                    // Increment the buffer address
                    pI2CHandle->pTxBuffer++;
                }
            }
        }
    } /* TXE event function end */

} /*ISR Function end */

