
stm32f411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008f4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000a8c  08000a8c  00010a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a9c  08000a9c  00010aa4  2**0
                  CONTENTS
  4 .ARM          00000000  08000a9c  08000a9c  00010aa4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a9c  08000aa4  00010aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a9c  08000a9c  00010a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000aa0  08000aa0  00010aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000aa4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000aa4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010aa4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014cc  00000000  00000000  00010ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000474  00000000  00000000  00011fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  00012418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  000125a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002658  00000000  00000000  000126f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b65  00000000  00000000  00014d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a551  00000000  00000000  000168ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00020dfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005a4  00000000  00000000  00020e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000a74 	.word	0x08000a74

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000a74 	.word	0x08000a74

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <GPIO_PeriClockControl>:
 */

#include "stm32f411_gpio_driver.h"

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d141      	bne.n	800027e <GPIO_PeriClockControl+0x96>
	{
		if (pGPIOx == GPIOA)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a43      	ldr	r2, [pc, #268]	; (800030c <GPIO_PeriClockControl+0x124>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000202:	4b43      	ldr	r3, [pc, #268]	; (8000310 <GPIO_PeriClockControl+0x128>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a42      	ldr	r2, [pc, #264]	; (8000310 <GPIO_PeriClockControl+0x128>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOE)
			GPIOE_PCLK_DI();
		else if (pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
	}
}
 800020e:	e077      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOB)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a40      	ldr	r2, [pc, #256]	; (8000314 <GPIO_PeriClockControl+0x12c>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000218:	4b3d      	ldr	r3, [pc, #244]	; (8000310 <GPIO_PeriClockControl+0x128>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a3c      	ldr	r2, [pc, #240]	; (8000310 <GPIO_PeriClockControl+0x128>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e06c      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOC)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a3b      	ldr	r2, [pc, #236]	; (8000318 <GPIO_PeriClockControl+0x130>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800022e:	4b38      	ldr	r3, [pc, #224]	; (8000310 <GPIO_PeriClockControl+0x128>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a37      	ldr	r2, [pc, #220]	; (8000310 <GPIO_PeriClockControl+0x128>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e061      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOD)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a37      	ldr	r2, [pc, #220]	; (800031c <GPIO_PeriClockControl+0x134>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000244:	4b32      	ldr	r3, [pc, #200]	; (8000310 <GPIO_PeriClockControl+0x128>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a31      	ldr	r2, [pc, #196]	; (8000310 <GPIO_PeriClockControl+0x128>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e056      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOE)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a32      	ldr	r2, [pc, #200]	; (8000320 <GPIO_PeriClockControl+0x138>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800025a:	4b2d      	ldr	r3, [pc, #180]	; (8000310 <GPIO_PeriClockControl+0x128>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a2c      	ldr	r2, [pc, #176]	; (8000310 <GPIO_PeriClockControl+0x128>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e04b      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOH)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a2e      	ldr	r2, [pc, #184]	; (8000324 <GPIO_PeriClockControl+0x13c>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d147      	bne.n	8000300 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000270:	4b27      	ldr	r3, [pc, #156]	; (8000310 <GPIO_PeriClockControl+0x128>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a26      	ldr	r2, [pc, #152]	; (8000310 <GPIO_PeriClockControl+0x128>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e040      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		if (pGPIOx == GPIOA)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a22      	ldr	r2, [pc, #136]	; (800030c <GPIO_PeriClockControl+0x124>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 8000286:	4b22      	ldr	r3, [pc, #136]	; (8000310 <GPIO_PeriClockControl+0x128>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a21      	ldr	r2, [pc, #132]	; (8000310 <GPIO_PeriClockControl+0x128>)
 800028c:	f023 0301 	bic.w	r3, r3, #1
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e035      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOB)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a1f      	ldr	r2, [pc, #124]	; (8000314 <GPIO_PeriClockControl+0x12c>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 800029c:	4b1c      	ldr	r3, [pc, #112]	; (8000310 <GPIO_PeriClockControl+0x128>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a1b      	ldr	r2, [pc, #108]	; (8000310 <GPIO_PeriClockControl+0x128>)
 80002a2:	f023 0302 	bic.w	r3, r3, #2
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e02a      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOC)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a1a      	ldr	r2, [pc, #104]	; (8000318 <GPIO_PeriClockControl+0x130>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d106      	bne.n	80002c0 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 80002b2:	4b17      	ldr	r3, [pc, #92]	; (8000310 <GPIO_PeriClockControl+0x128>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a16      	ldr	r2, [pc, #88]	; (8000310 <GPIO_PeriClockControl+0x128>)
 80002b8:	f023 0304 	bic.w	r3, r3, #4
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e01f      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOD)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a16      	ldr	r2, [pc, #88]	; (800031c <GPIO_PeriClockControl+0x134>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <GPIO_PeriClockControl+0x128>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a10      	ldr	r2, [pc, #64]	; (8000310 <GPIO_PeriClockControl+0x128>)
 80002ce:	f023 0308 	bic.w	r3, r3, #8
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e014      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOE)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a11      	ldr	r2, [pc, #68]	; (8000320 <GPIO_PeriClockControl+0x138>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <GPIO_PeriClockControl+0x128>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a0b      	ldr	r2, [pc, #44]	; (8000310 <GPIO_PeriClockControl+0x128>)
 80002e4:	f023 0310 	bic.w	r3, r3, #16
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e009      	b.n	8000300 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOH)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <GPIO_PeriClockControl+0x13c>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d105      	bne.n	8000300 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <GPIO_PeriClockControl+0x128>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a05      	ldr	r2, [pc, #20]	; (8000310 <GPIO_PeriClockControl+0x128>)
 80002fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	40020000 	.word	0x40020000
 8000310:	40023800 	.word	0x40023800
 8000314:	40020400 	.word	0x40020400
 8000318:	40020800 	.word	0x40020800
 800031c:	40020c00 	.word	0x40020c00
 8000320:	40021000 	.word	0x40021000
 8000324:	40021c00 	.word	0x40021c00

08000328 <GPIO_Init>:

// gpio init and deinit apis
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

    // enable the peripheral clock
    GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2101      	movs	r1, #1
 800033a:	4618      	mov	r0, r3
 800033c:	f7ff ff54 	bl	80001e8 <GPIO_PeriClockControl>

    // configure the modes of a gpio pin
    // configuring non interrupt modes
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	795b      	ldrb	r3, [r3, #5]
 8000344:	2b03      	cmp	r3, #3
 8000346:	d81f      	bhi.n	8000388 <GPIO_Init+0x60>
    {
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	795b      	ldrb	r3, [r3, #5]
 800034c:	461a      	mov	r2, r3
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	791b      	ldrb	r3, [r3, #4]
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	fa02 f303 	lsl.w	r3, r2, r3
 8000358:	617b      	str	r3, [r7, #20]
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	791b      	ldrb	r3, [r3, #4]
 8000364:	4619      	mov	r1, r3
 8000366:	2303      	movs	r3, #3
 8000368:	408b      	lsls	r3, r1
 800036a:	43db      	mvns	r3, r3
 800036c:	4619      	mov	r1, r3
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	400a      	ands	r2, r1
 8000374:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	6819      	ldr	r1, [r3, #0]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	697a      	ldr	r2, [r7, #20]
 8000382:	430a      	orrs	r2, r1
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	e0b7      	b.n	80004f8 <GPIO_Init+0x1d0>
    }
    else
    {
        // it is interrupt mode

        if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	795b      	ldrb	r3, [r3, #5]
 800038c:	2b04      	cmp	r3, #4
 800038e:	d117      	bne.n	80003c0 <GPIO_Init+0x98>
        {

            // configure the ftsr register
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000390:	4b40      	ldr	r3, [pc, #256]	; (8000494 <GPIO_Init+0x16c>)
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	7912      	ldrb	r2, [r2, #4]
 8000398:	4611      	mov	r1, r2
 800039a:	2201      	movs	r2, #1
 800039c:	408a      	lsls	r2, r1
 800039e:	4611      	mov	r1, r2
 80003a0:	4a3c      	ldr	r2, [pc, #240]	; (8000494 <GPIO_Init+0x16c>)
 80003a2:	430b      	orrs	r3, r1
 80003a4:	60d3      	str	r3, [r2, #12]
            // clear the rtsr bit
            EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003a6:	4b3b      	ldr	r3, [pc, #236]	; (8000494 <GPIO_Init+0x16c>)
 80003a8:	689b      	ldr	r3, [r3, #8]
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	7912      	ldrb	r2, [r2, #4]
 80003ae:	4611      	mov	r1, r2
 80003b0:	2201      	movs	r2, #1
 80003b2:	408a      	lsls	r2, r1
 80003b4:	43d2      	mvns	r2, r2
 80003b6:	4611      	mov	r1, r2
 80003b8:	4a36      	ldr	r2, [pc, #216]	; (8000494 <GPIO_Init+0x16c>)
 80003ba:	400b      	ands	r3, r1
 80003bc:	6093      	str	r3, [r2, #8]
 80003be:	e035      	b.n	800042c <GPIO_Init+0x104>
        }
        else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	795b      	ldrb	r3, [r3, #5]
 80003c4:	2b05      	cmp	r3, #5
 80003c6:	d117      	bne.n	80003f8 <GPIO_Init+0xd0>
        {

            // configure the rtsr register
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003c8:	4b32      	ldr	r3, [pc, #200]	; (8000494 <GPIO_Init+0x16c>)
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	7912      	ldrb	r2, [r2, #4]
 80003d0:	4611      	mov	r1, r2
 80003d2:	2201      	movs	r2, #1
 80003d4:	408a      	lsls	r2, r1
 80003d6:	4611      	mov	r1, r2
 80003d8:	4a2e      	ldr	r2, [pc, #184]	; (8000494 <GPIO_Init+0x16c>)
 80003da:	430b      	orrs	r3, r1
 80003dc:	6093      	str	r3, [r2, #8]
            // clear the rtsr bit
            EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003de:	4b2d      	ldr	r3, [pc, #180]	; (8000494 <GPIO_Init+0x16c>)
 80003e0:	68db      	ldr	r3, [r3, #12]
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	7912      	ldrb	r2, [r2, #4]
 80003e6:	4611      	mov	r1, r2
 80003e8:	2201      	movs	r2, #1
 80003ea:	408a      	lsls	r2, r1
 80003ec:	43d2      	mvns	r2, r2
 80003ee:	4611      	mov	r1, r2
 80003f0:	4a28      	ldr	r2, [pc, #160]	; (8000494 <GPIO_Init+0x16c>)
 80003f2:	400b      	ands	r3, r1
 80003f4:	60d3      	str	r3, [r2, #12]
 80003f6:	e019      	b.n	800042c <GPIO_Init+0x104>
        }
        else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	795b      	ldrb	r3, [r3, #5]
 80003fc:	2b06      	cmp	r3, #6
 80003fe:	d115      	bne.n	800042c <GPIO_Init+0x104>
        {
            // configure the rftsr register
            // configure the rtsr register
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000400:	4b24      	ldr	r3, [pc, #144]	; (8000494 <GPIO_Init+0x16c>)
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	687a      	ldr	r2, [r7, #4]
 8000406:	7912      	ldrb	r2, [r2, #4]
 8000408:	4611      	mov	r1, r2
 800040a:	2201      	movs	r2, #1
 800040c:	408a      	lsls	r2, r1
 800040e:	4611      	mov	r1, r2
 8000410:	4a20      	ldr	r2, [pc, #128]	; (8000494 <GPIO_Init+0x16c>)
 8000412:	430b      	orrs	r3, r1
 8000414:	6093      	str	r3, [r2, #8]
            // clear the rtsr bit
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000416:	4b1f      	ldr	r3, [pc, #124]	; (8000494 <GPIO_Init+0x16c>)
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	7912      	ldrb	r2, [r2, #4]
 800041e:	4611      	mov	r1, r2
 8000420:	2201      	movs	r2, #1
 8000422:	408a      	lsls	r2, r1
 8000424:	4611      	mov	r1, r2
 8000426:	4a1b      	ldr	r2, [pc, #108]	; (8000494 <GPIO_Init+0x16c>)
 8000428:	430b      	orrs	r3, r1
 800042a:	60d3      	str	r3, [r2, #12]
        }

        // configure the gpio port selection in syscfg_exticr
        // syscfg SYSCFG_EXTICR[x] configures which pin of which port issues interrupt
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	791b      	ldrb	r3, [r3, #4]
 8000430:	089b      	lsrs	r3, r3, #2
 8000432:	74fb      	strb	r3, [r7, #19]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	791b      	ldrb	r3, [r3, #4]
 8000438:	f003 0303 	and.w	r3, r3, #3
 800043c:	74bb      	strb	r3, [r7, #18]
        uint8_t portcode = (GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx));
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a15      	ldr	r2, [pc, #84]	; (8000498 <GPIO_Init+0x170>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d033      	beq.n	80004b0 <GPIO_Init+0x188>
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a13      	ldr	r2, [pc, #76]	; (800049c <GPIO_Init+0x174>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d01d      	beq.n	800048e <GPIO_Init+0x166>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a12      	ldr	r2, [pc, #72]	; (80004a0 <GPIO_Init+0x178>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d016      	beq.n	800048a <GPIO_Init+0x162>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <GPIO_Init+0x17c>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d00f      	beq.n	8000486 <GPIO_Init+0x15e>
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <GPIO_Init+0x180>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d008      	beq.n	8000482 <GPIO_Init+0x15a>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a0d      	ldr	r2, [pc, #52]	; (80004ac <GPIO_Init+0x184>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d101      	bne.n	800047e <GPIO_Init+0x156>
 800047a:	2305      	movs	r3, #5
 800047c:	e019      	b.n	80004b2 <GPIO_Init+0x18a>
 800047e:	2300      	movs	r3, #0
 8000480:	e017      	b.n	80004b2 <GPIO_Init+0x18a>
 8000482:	2304      	movs	r3, #4
 8000484:	e015      	b.n	80004b2 <GPIO_Init+0x18a>
 8000486:	2303      	movs	r3, #3
 8000488:	e013      	b.n	80004b2 <GPIO_Init+0x18a>
 800048a:	2302      	movs	r3, #2
 800048c:	e011      	b.n	80004b2 <GPIO_Init+0x18a>
 800048e:	2301      	movs	r3, #1
 8000490:	e00f      	b.n	80004b2 <GPIO_Init+0x18a>
 8000492:	bf00      	nop
 8000494:	40013c00 	.word	0x40013c00
 8000498:	40020000 	.word	0x40020000
 800049c:	40020400 	.word	0x40020400
 80004a0:	40020800 	.word	0x40020800
 80004a4:	40020c00 	.word	0x40020c00
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40021c00 	.word	0x40021c00
 80004b0:	2300      	movs	r3, #0
 80004b2:	747b      	strb	r3, [r7, #17]
        // enabling the clock for syscfg before configuring the registers for syscfg
        SYSCFG_PCLK_EN();
 80004b4:	4b5f      	ldr	r3, [pc, #380]	; (8000634 <GPIO_Init+0x30c>)
 80004b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004b8:	4a5e      	ldr	r2, [pc, #376]	; (8000634 <GPIO_Init+0x30c>)
 80004ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004be:	6453      	str	r3, [r2, #68]	; 0x44
        SYSCFG->EXTICR[temp1] |= (portcode << (temp2 * 4));
 80004c0:	4a5d      	ldr	r2, [pc, #372]	; (8000638 <GPIO_Init+0x310>)
 80004c2:	7cfb      	ldrb	r3, [r7, #19]
 80004c4:	3302      	adds	r3, #2
 80004c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004ca:	7c79      	ldrb	r1, [r7, #17]
 80004cc:	7cbb      	ldrb	r3, [r7, #18]
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	fa01 f303 	lsl.w	r3, r1, r3
 80004d4:	4618      	mov	r0, r3
 80004d6:	4958      	ldr	r1, [pc, #352]	; (8000638 <GPIO_Init+0x310>)
 80004d8:	7cfb      	ldrb	r3, [r7, #19]
 80004da:	4302      	orrs	r2, r0
 80004dc:	3302      	adds	r3, #2
 80004de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // enable the interrupt delivery in exti
        EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e2:	4b56      	ldr	r3, [pc, #344]	; (800063c <GPIO_Init+0x314>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	7912      	ldrb	r2, [r2, #4]
 80004ea:	4611      	mov	r1, r2
 80004ec:	2201      	movs	r2, #1
 80004ee:	408a      	lsls	r2, r1
 80004f0:	4611      	mov	r1, r2
 80004f2:	4a52      	ldr	r2, [pc, #328]	; (800063c <GPIO_Init+0x314>)
 80004f4:	430b      	orrs	r3, r1
 80004f6:	6013      	str	r3, [r2, #0]
    }
    temp = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]

    // configure the speed
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	799b      	ldrb	r3, [r3, #6]
 8000500:	461a      	mov	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	fa02 f303 	lsl.w	r3, r2, r3
 800050c:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	689a      	ldr	r2, [r3, #8]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	4619      	mov	r1, r3
 800051a:	2303      	movs	r3, #3
 800051c:	408b      	lsls	r3, r1
 800051e:	43db      	mvns	r3, r3
 8000520:	4619      	mov	r1, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	400a      	ands	r2, r1
 8000528:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	6899      	ldr	r1, [r3, #8]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	697a      	ldr	r2, [r7, #20]
 8000536:	430a      	orrs	r2, r1
 8000538:	609a      	str	r2, [r3, #8]
    temp = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]

    // configure the pupd control
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	79db      	ldrb	r3, [r3, #7]
 8000542:	461a      	mov	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	791b      	ldrb	r3, [r3, #4]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	fa02 f303 	lsl.w	r3, r2, r3
 800054e:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	68da      	ldr	r2, [r3, #12]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	791b      	ldrb	r3, [r3, #4]
 800055a:	4619      	mov	r1, r3
 800055c:	2303      	movs	r3, #3
 800055e:	408b      	lsls	r3, r1
 8000560:	43db      	mvns	r3, r3
 8000562:	4619      	mov	r1, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	400a      	ands	r2, r1
 800056a:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	68d9      	ldr	r1, [r3, #12]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	697a      	ldr	r2, [r7, #20]
 8000578:	430a      	orrs	r2, r1
 800057a:	60da      	str	r2, [r3, #12]
    temp = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]

    // configure the optype
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	7a1b      	ldrb	r3, [r3, #8]
 8000584:	461a      	mov	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	791b      	ldrb	r3, [r3, #4]
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	685a      	ldr	r2, [r3, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	791b      	ldrb	r3, [r3, #4]
 800059a:	4619      	mov	r1, r3
 800059c:	2301      	movs	r3, #1
 800059e:	408b      	lsls	r3, r1
 80005a0:	43db      	mvns	r3, r3
 80005a2:	4619      	mov	r1, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	400a      	ands	r2, r1
 80005aa:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	6859      	ldr	r1, [r3, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	697a      	ldr	r2, [r7, #20]
 80005b8:	430a      	orrs	r2, r1
 80005ba:	605a      	str	r2, [r3, #4]
    temp = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]

    // configure the alternate functionality
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	795b      	ldrb	r3, [r3, #5]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d131      	bne.n	800062c <GPIO_Init+0x304>
    {
        // configure the alternate function registers
        uint8_t temp1, temp2;

        temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	791b      	ldrb	r3, [r3, #4]
 80005cc:	08db      	lsrs	r3, r3, #3
 80005ce:	743b      	strb	r3, [r7, #16]
        temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	f003 0307 	and.w	r3, r3, #7
 80005d8:	73fb      	strb	r3, [r7, #15]
        pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	7c3a      	ldrb	r2, [r7, #16]
 80005e0:	3208      	adds	r2, #8
 80005e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	220f      	movs	r2, #15
 80005ec:	fa02 f303 	lsl.w	r3, r2, r3
 80005f0:	43db      	mvns	r3, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	7c3a      	ldrb	r2, [r7, #16]
 80005fa:	4001      	ands	r1, r0
 80005fc:	3208      	adds	r2, #8
 80005fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	7c3a      	ldrb	r2, [r7, #16]
 8000608:	3208      	adds	r2, #8
 800060a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	7a5b      	ldrb	r3, [r3, #9]
 8000612:	461a      	mov	r2, r3
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	fa02 f303 	lsl.w	r3, r2, r3
 800061c:	4618      	mov	r0, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	7c3a      	ldrb	r2, [r7, #16]
 8000624:	4301      	orrs	r1, r0
 8000626:	3208      	adds	r2, #8
 8000628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 800062c:	bf00      	nop
 800062e:	3718      	adds	r7, #24
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40013800 	.word	0x40013800
 800063c:	40013c00 	.word	0x40013c00

08000640 <SPI_PeriClockControl>:

static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_error_interrupt_handle(SPI_Handle_t *pSPIHandle);
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx , uint8_t EnorDi)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d136      	bne.n	80006c0 <SPI_PeriClockControl+0x80>
	{
		if (pSPIx == SPI1)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a38      	ldr	r2, [pc, #224]	; (8000738 <SPI_PeriClockControl+0xf8>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d106      	bne.n	8000668 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 800065a:	4b38      	ldr	r3, [pc, #224]	; (800073c <SPI_PeriClockControl+0xfc>)
 800065c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065e:	4a37      	ldr	r2, [pc, #220]	; (800073c <SPI_PeriClockControl+0xfc>)
 8000660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000664:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pSPIx == SPI4)
			SPI4_PCLK_DI();
		else if (pSPIx == SPI5)
			SPI5_PCLK_DI();
	}
}
 8000666:	e061      	b.n	800072c <SPI_PeriClockControl+0xec>
		else if (pSPIx == SPI2)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a35      	ldr	r2, [pc, #212]	; (8000740 <SPI_PeriClockControl+0x100>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d106      	bne.n	800067e <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000670:	4b32      	ldr	r3, [pc, #200]	; (800073c <SPI_PeriClockControl+0xfc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a31      	ldr	r2, [pc, #196]	; (800073c <SPI_PeriClockControl+0xfc>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800067c:	e056      	b.n	800072c <SPI_PeriClockControl+0xec>
		else if (pSPIx == SPI3)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a30      	ldr	r2, [pc, #192]	; (8000744 <SPI_PeriClockControl+0x104>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d106      	bne.n	8000694 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 8000686:	4b2d      	ldr	r3, [pc, #180]	; (800073c <SPI_PeriClockControl+0xfc>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	4a2c      	ldr	r2, [pc, #176]	; (800073c <SPI_PeriClockControl+0xfc>)
 800068c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000690:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000692:	e04b      	b.n	800072c <SPI_PeriClockControl+0xec>
		else if (pSPIx == SPI4)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a2c      	ldr	r2, [pc, #176]	; (8000748 <SPI_PeriClockControl+0x108>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d106      	bne.n	80006aa <SPI_PeriClockControl+0x6a>
			SPI4_PCLK_EN();
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <SPI_PeriClockControl+0xfc>)
 800069e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a0:	4a26      	ldr	r2, [pc, #152]	; (800073c <SPI_PeriClockControl+0xfc>)
 80006a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006a6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80006a8:	e040      	b.n	800072c <SPI_PeriClockControl+0xec>
		else if (pSPIx == SPI5)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a27      	ldr	r2, [pc, #156]	; (800074c <SPI_PeriClockControl+0x10c>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d13c      	bne.n	800072c <SPI_PeriClockControl+0xec>
			SPI5_PCLK_EN();
 80006b2:	4b22      	ldr	r3, [pc, #136]	; (800073c <SPI_PeriClockControl+0xfc>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a21      	ldr	r2, [pc, #132]	; (800073c <SPI_PeriClockControl+0xfc>)
 80006b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
}
 80006be:	e035      	b.n	800072c <SPI_PeriClockControl+0xec>
		if (pSPIx == SPI1)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a1d      	ldr	r2, [pc, #116]	; (8000738 <SPI_PeriClockControl+0xf8>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d106      	bne.n	80006d6 <SPI_PeriClockControl+0x96>
			SPI1_PCLK_DI();
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <SPI_PeriClockControl+0xfc>)
 80006ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006cc:	4a1b      	ldr	r2, [pc, #108]	; (800073c <SPI_PeriClockControl+0xfc>)
 80006ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80006d2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80006d4:	e02a      	b.n	800072c <SPI_PeriClockControl+0xec>
		else if (pSPIx == SPI2)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a19      	ldr	r2, [pc, #100]	; (8000740 <SPI_PeriClockControl+0x100>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d106      	bne.n	80006ec <SPI_PeriClockControl+0xac>
			SPI2_PCLK_DI();
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <SPI_PeriClockControl+0xfc>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	4a16      	ldr	r2, [pc, #88]	; (800073c <SPI_PeriClockControl+0xfc>)
 80006e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006e8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006ea:	e01f      	b.n	800072c <SPI_PeriClockControl+0xec>
		else if (pSPIx == SPI3)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a15      	ldr	r2, [pc, #84]	; (8000744 <SPI_PeriClockControl+0x104>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d106      	bne.n	8000702 <SPI_PeriClockControl+0xc2>
			SPI3_PCLK_DI();
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <SPI_PeriClockControl+0xfc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a10      	ldr	r2, [pc, #64]	; (800073c <SPI_PeriClockControl+0xfc>)
 80006fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000700:	e014      	b.n	800072c <SPI_PeriClockControl+0xec>
		else if (pSPIx == SPI4)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a10      	ldr	r2, [pc, #64]	; (8000748 <SPI_PeriClockControl+0x108>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d106      	bne.n	8000718 <SPI_PeriClockControl+0xd8>
			SPI4_PCLK_DI();
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <SPI_PeriClockControl+0xfc>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	4a0b      	ldr	r2, [pc, #44]	; (800073c <SPI_PeriClockControl+0xfc>)
 8000710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000714:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000716:	e009      	b.n	800072c <SPI_PeriClockControl+0xec>
		else if (pSPIx == SPI5)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a0c      	ldr	r2, [pc, #48]	; (800074c <SPI_PeriClockControl+0x10c>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d105      	bne.n	800072c <SPI_PeriClockControl+0xec>
			SPI5_PCLK_DI();
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <SPI_PeriClockControl+0xfc>)
 8000722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000724:	4a05      	ldr	r2, [pc, #20]	; (800073c <SPI_PeriClockControl+0xfc>)
 8000726:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800072a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	40013000 	.word	0x40013000
 800073c:	40023800 	.word	0x40023800
 8000740:	40003800 	.word	0x40003800
 8000744:	40003c00 	.word	0x40003c00
 8000748:	40013400 	.word	0x40013400
 800074c:	40015000 	.word	0x40015000

08000750 <SPI_Init>:

// init and deinit apis
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	// enable the clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2101      	movs	r1, #1
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff6e 	bl	8000640 <SPI_PeriClockControl>

// first configure the SPI_CR1 register
	uint32_t tempreg = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]

	// configure the the spi device mode
	tempreg |= ( pSPIHandle->SPI_Config.SPI_DeviceMode << SPI_CR1_MSTR);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	461a      	mov	r2, r3
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	4313      	orrs	r3, r2
 8000774:	60fb      	str	r3, [r7, #12]

	// configure the bus config
	if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	795b      	ldrb	r3, [r3, #5]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d104      	bne.n	8000788 <SPI_Init+0x38>
	{
		// BIDIMODE should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	e014      	b.n	80007b2 <SPI_Init+0x62>
	}
	else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	795b      	ldrb	r3, [r3, #5]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d104      	bne.n	800079a <SPI_Init+0x4a>
	{
		// BIDIMODE should be set
		tempreg |=  ( 1 << SPI_CR1_BIDIMODE);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	e00b      	b.n	80007b2 <SPI_Init+0x62>
	}
	else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	795b      	ldrb	r3, [r3, #5]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	d107      	bne.n	80007b2 <SPI_Init+0x62>
	{
		// BIDIMODE should be cleared ;
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007a8:	60fb      	str	r3, [r7, #12]

		// RXOONLY bit should be set
		tempreg |=  ( 1 << SPI_CR1_RXONLY);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007b0:	60fb      	str	r3, [r7, #12]
	}

	// configure spi clock speed
	tempreg |= (pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_CR1_BR);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	799b      	ldrb	r3, [r3, #6]
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	461a      	mov	r2, r3
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	4313      	orrs	r3, r2
 80007be:	60fb      	str	r3, [r7, #12]

	// configure spi dff mode
	tempreg |= (pSPIHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	79db      	ldrb	r3, [r3, #7]
 80007c4:	02db      	lsls	r3, r3, #11
 80007c6:	461a      	mov	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]

	// configure spi cpol
	tempreg |= (pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	7a1b      	ldrb	r3, [r3, #8]
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	461a      	mov	r2, r3
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	4313      	orrs	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]

	// configure spi cpha
	tempreg |= (pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPHA);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	7a1b      	ldrb	r3, [r3, #8]
 80007e0:	461a      	mov	r2, r3
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]

	// configure spi ssm
	tempreg |= (pSPIHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	7a9b      	ldrb	r3, [r3, #10]
 80007ec:	025b      	lsls	r3, r3, #9
 80007ee:	461a      	mov	r2, r3
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	68fa      	ldr	r2, [r7, #12]
 80007fc:	601a      	str	r2, [r3, #0]
}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <SPI_GetFlagStatus>:
		SPI5_REG_RESET();
}

//SPI get flag status
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName )
{
 8000806:	b480      	push	{r7}
 8000808:	b083      	sub	sp, #12
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
 800080e:	6039      	str	r1, [r7, #0]
	if ((pSPIx->SR &  FlagName))
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	689a      	ldr	r2, [r3, #8]
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	4013      	ands	r3, r2
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800081c:	2301      	movs	r3, #1
 800081e:	e000      	b.n	8000822 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <SPI_Send>:

// SPI send and receive apis
void SPI_Send(SPI_RegDef_t *pSPIx , uint8_t *pTxBuffer , uint32_t length)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b084      	sub	sp, #16
 8000832:	af00      	add	r7, sp, #0
 8000834:	60f8      	str	r0, [r7, #12]
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
	while(length > 0)
 800083a:	e027      	b.n	800088c <SPI_Send+0x5e>
	{
		//wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 800083c:	bf00      	nop
 800083e:	2102      	movs	r1, #2
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	f7ff ffe0 	bl	8000806 <SPI_GetFlagStatus>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d0f8      	beq.n	800083e <SPI_Send+0x10>

		//check the DFF bit in CR1
		if ((pSPIx->CR1 & (1 << SPI_CR1_DFF)))
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000854:	2b00      	cmp	r3, #0
 8000856:	d00e      	beq.n	8000876 <SPI_Send+0x48>
		{
			// 16 bit data format
			// load 16 bit of data into DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	60da      	str	r2, [r3, #12]
			length--;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3b01      	subs	r3, #1
 8000866:	607b      	str	r3, [r7, #4]
			length--;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3b01      	subs	r3, #1
 800086c:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	3301      	adds	r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	e00a      	b.n	800088c <SPI_Send+0x5e>
		}
		else
		{
			// load 8 bit data into DR
			pSPIx->DR = *pTxBuffer;
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	60da      	str	r2, [r3, #12]
			length--;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3b01      	subs	r3, #1
 8000884:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	3301      	adds	r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
	while(length > 0)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d1d4      	bne.n	800083c <SPI_Send+0xe>
		}
	}
}
 8000892:	bf00      	nop
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <SPI_PeripheralControl>:
	}
}

// SPI peripheral enable
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d106      	bne.n	80008bc <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	601a      	str	r2, [r3, #0]
	else
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
}
 80008ba:	e005      	b.n	80008c8 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	601a      	str	r2, [r3, #0]
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <SPI_SSIConfig>:

// SPI SSI configuration
void  SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d106      	bne.n	80008f4 <SPI_SSIConfig+0x20>
		pSPIx->CR1 |=  (1 << SPI_CR1_SSI);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	601a      	str	r2, [r3, #0]
	else
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
}
 80008f2:	e005      	b.n	8000900 <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	601a      	str	r2, [r3, #0]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <SPI2_GPIOInits>:
#include "stm32f411.h"
#include "stm32f411_gpio_driver.h"
#include "stm32f411_spi_driver.h"

void SPI2_GPIOInits(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <SPI2_GPIOInits+0x40>)
 8000914:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000916:	2302      	movs	r3, #2
 8000918:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800091a:	2305      	movs	r3, #5
 800091c:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800091e:	2300      	movs	r3, #0
 8000920:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000922:	2300      	movs	r3, #0
 8000924:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800092a:	230d      	movs	r3, #13
 800092c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fcf9 	bl	8000328 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000936:	230f      	movs	r3, #15
 8000938:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fcf3 	bl	8000328 <GPIO_Init>
	//NSS
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	//GPIO_Init(&SPIPins);


}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40020400 	.word	0x40020400

08000950 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <SPI2_Inits+0x38>)
 8000958:	603b      	str	r3, [r7, #0]
	SPI2handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800095a:	2301      	movs	r3, #1
 800095c:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800095e:	2301      	movs	r3, #1
 8000960:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;//generates sclk of 8MHz
 8000962:	2300      	movs	r3, #0
 8000964:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 8000966:	2300      	movs	r3, #0
 8000968:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPI_Config.SPI_CPOL = SPI_CPOL_HIGH;
 800096a:	2301      	movs	r3, #1
 800096c:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPI_Config.SPI_SSM = SPI_SSM_EN; //software slave management enabled for NSS pin
 8000972:	2301      	movs	r3, #1
 8000974:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 8000976:	463b      	mov	r3, r7
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fee9 	bl	8000750 <SPI_Init>
}
 800097e:	bf00      	nop
 8000980:	3720      	adds	r7, #32
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40003800 	.word	0x40003800

0800098c <main>:


int main (void ){
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0


	char user_data[] = "Hello, I'm Tan";
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <main+0x44>)
 8000994:	463c      	mov	r4, r7
 8000996:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000998:	c407      	stmia	r4!, {r0, r1, r2}
 800099a:	8023      	strh	r3, [r4, #0]
 800099c:	3402      	adds	r4, #2
 800099e:	0c1b      	lsrs	r3, r3, #16
 80009a0:	7023      	strb	r3, [r4, #0]

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80009a2:	f7ff ffb3 	bl	800090c <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80009a6:	f7ff ffd3 	bl	8000950 <SPI2_Inits>

	//spi ssi config
	SPI_SSIConfig(SPI2, ENABLE) ;
 80009aa:	2101      	movs	r1, #1
 80009ac:	4809      	ldr	r0, [pc, #36]	; (80009d4 <main+0x48>)
 80009ae:	f7ff ff91 	bl	80008d4 <SPI_SSIConfig>

	// enable the spi peripheral
	SPI_PeripheralControl(SPI2, ENABLE) ;
 80009b2:	2101      	movs	r1, #1
 80009b4:	4807      	ldr	r0, [pc, #28]	; (80009d4 <main+0x48>)
 80009b6:	f7ff ff71 	bl	800089c <SPI_PeripheralControl>

	// send data over spi
	SPI_Send(SPI2, (uint8_t*)user_data, strlen(user_data)) ;
 80009ba:	463b      	mov	r3, r7
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fc0b 	bl	80001d8 <strlen>
 80009c2:	4602      	mov	r2, r0
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <main+0x48>)
 80009ca:	f7ff ff30 	bl	800082e <SPI_Send>

	//close the communication by disabling the peripherals
//	SPI_PeripheralControl(SPI2, DISABLE) ;

	while(1);
 80009ce:	e7fe      	b.n	80009ce <main+0x42>
 80009d0:	08000a8c 	.word	0x08000a8c
 80009d4:	40003800 	.word	0x40003800

080009d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d8:	480d      	ldr	r0, [pc, #52]	; (8000a10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e0:	480c      	ldr	r0, [pc, #48]	; (8000a14 <LoopForever+0x6>)
  ldr r1, =_edata
 80009e2:	490d      	ldr	r1, [pc, #52]	; (8000a18 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e4:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <LoopForever+0xe>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e8:	e002      	b.n	80009f0 <LoopCopyDataInit>

080009ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ee:	3304      	adds	r3, #4

080009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f4:	d3f9      	bcc.n	80009ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f8:	4c0a      	ldr	r4, [pc, #40]	; (8000a24 <LoopForever+0x16>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009fc:	e001      	b.n	8000a02 <LoopFillZerobss>

080009fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a00:	3204      	adds	r2, #4

08000a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a04:	d3fb      	bcc.n	80009fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a06:	f000 f811 	bl	8000a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0a:	f7ff ffbf 	bl	800098c <main>

08000a0e <LoopForever>:

LoopForever:
  b LoopForever
 8000a0e:	e7fe      	b.n	8000a0e <LoopForever>
  ldr   r0, =_estack
 8000a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a1c:	08000aa4 	.word	0x08000aa4
  ldr r2, =_sbss
 8000a20:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a24:	2000001c 	.word	0x2000001c

08000a28 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC_IRQHandler>
	...

08000a2c <__libc_init_array>:
 8000a2c:	b570      	push	{r4, r5, r6, lr}
 8000a2e:	4d0d      	ldr	r5, [pc, #52]	; (8000a64 <__libc_init_array+0x38>)
 8000a30:	4c0d      	ldr	r4, [pc, #52]	; (8000a68 <__libc_init_array+0x3c>)
 8000a32:	1b64      	subs	r4, r4, r5
 8000a34:	10a4      	asrs	r4, r4, #2
 8000a36:	2600      	movs	r6, #0
 8000a38:	42a6      	cmp	r6, r4
 8000a3a:	d109      	bne.n	8000a50 <__libc_init_array+0x24>
 8000a3c:	4d0b      	ldr	r5, [pc, #44]	; (8000a6c <__libc_init_array+0x40>)
 8000a3e:	4c0c      	ldr	r4, [pc, #48]	; (8000a70 <__libc_init_array+0x44>)
 8000a40:	f000 f818 	bl	8000a74 <_init>
 8000a44:	1b64      	subs	r4, r4, r5
 8000a46:	10a4      	asrs	r4, r4, #2
 8000a48:	2600      	movs	r6, #0
 8000a4a:	42a6      	cmp	r6, r4
 8000a4c:	d105      	bne.n	8000a5a <__libc_init_array+0x2e>
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a54:	4798      	blx	r3
 8000a56:	3601      	adds	r6, #1
 8000a58:	e7ee      	b.n	8000a38 <__libc_init_array+0xc>
 8000a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a5e:	4798      	blx	r3
 8000a60:	3601      	adds	r6, #1
 8000a62:	e7f2      	b.n	8000a4a <__libc_init_array+0x1e>
 8000a64:	08000a9c 	.word	0x08000a9c
 8000a68:	08000a9c 	.word	0x08000a9c
 8000a6c:	08000a9c 	.word	0x08000a9c
 8000a70:	08000aa0 	.word	0x08000aa0

08000a74 <_init>:
 8000a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a76:	bf00      	nop
 8000a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a7a:	bc08      	pop	{r3}
 8000a7c:	469e      	mov	lr, r3
 8000a7e:	4770      	bx	lr

08000a80 <_fini>:
 8000a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a82:	bf00      	nop
 8000a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a86:	bc08      	pop	{r3}
 8000a88:	469e      	mov	lr, r3
 8000a8a:	4770      	bx	lr
